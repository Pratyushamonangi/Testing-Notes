Manual Testing (functional, Non-functional), Safe Agile methodology, Live project, Project Selection.

Manual Testing: 
A Technique to test the software using functions and features of the application

(We will test the application by navigating to phase by phase and check the application)

In this testing a tester tests the software by following pre defined test cases

Testing > Functional, Non-functional

Functional Test planning:

Software Application > Developed group of computer programs when we give data they produce output. Developer writes some programs and user interface(UI) is visible to us. 
Ex: Flipkart and amazon

Two types in software application 
Project > Should be worked for limited number of audience
ex: Capegemini org. portal
Product > Should be worked for multiple set of audience
ex: amazon

App. is made based on req. 
ex: Budget planning, Choose a land, purchase land, Approvals, Civil engineer contract, Interior designer contract, House warming.

Software Development Life Cycle(SDLC):
1.Req. Gathering : Business analyst goes to customer or client and gather the needs & req. (BA-Technical analyst, Functional Analyst)
2.Planning 	 : Manager decides about planning
3.Design  	 : High level(app. architecture is complex ex: amazon), Low level(app. is designed phase by phase) - Test matrix(test plan, test scenario, test case, test steps)
4.Development 	 : Developer develops the code 
5.Testing	 : Check if the req. is satisfied as per client we test it and report if any error
6.Delivery & Maintenance : Once app. is delivered to customer & maintenance is provided further

Error : incorrect human action
Defect/Bug/issue/incident : if expected and actual result varies 
Failure : if the application 
=================================================================================================== 

Software testing
> It is a combination of verification (Static Testing) & Validation (Dynamic Testing)
Verification
> are we developing the right product or not (in developing process)
> review : examining project related works
  Management review 	: deliverables are meet or not
  Code review 		: review on developers code
  Formal review		: systematic procedure and proper documentation or reviewed
  Informal review	: Random review without proper plan
  Technical review	: Technical discussion (tools) 
Validation
> whether developed product is right or wrong (after development of application)
White box testing > unit testing + integration testing
Black box testing > techniques
Types of Software testing

1.Wbt* (white box testing) : unit + integration testing
> It allows the tester to verify internal workings of the software system this includes analyzing the code, infrastructure, and integrations with the external system.
> [time consuming process]

2.Bbt* :
> It is a type of software testing where the functionality of the software system is tested without looking at the internal workings or structures of the software system.
> tester doesnt know internal functionality, input and output are verified.

Bbt Techniques:
types > 
equilance class partition : identify data in form of sets and make sure each set will get same output instead of testing all values in group simply pick one value and verify it.
Boundary value analysis	  : used to find errors at boundaries of input domain rather than finding those errors in entire input.
Decision table analysis	  : test cases are designed to execute combination of inputs shown in decision table.

username	password	login status
crt		 crt		 success
crt		 wrng		 fail
wrong		 crct		 fail

state transaction analysis : used to observe behaviour of application for diff. input conditions passed in sequence both +ve -ve behavior
use case anaylsis 	   : for every action verify appropriate system response ex: atm card (atm machine response)

3.Gray Box Testing : It is a software testing technique that is a combination of the Black Box Testing technique and the White Box Testing technique.
The internal structure is partially known in Gray Box Testing.

4.Unit Testing *: where the individual units or modules of the application are tested. It ensures that each module is working correctly.

5.Integration Testing *: In Integration testing , combined individual units are tested as a group and expose the faults in the interaction between the integrated units.

6.Smoke Testing *: where the basic functionality or feature of the application is tested as it ensures that the most important function works properly.

7.User Acceptance Testing *: User acceptance testing is done by the client to certify that the system meets the requirements and works as intended. It is the final phase of testing before the product release.

8.Interface Testing: checks the proper interaction between two different software systems.

9.System Testing *: that is performed on the complete integrated system to evaluate the compliance of the system with the corresponding requirements.

10.Regression Testing *: Regression testing is done to make sure that the code changes do not affect the existing functionality and the features of the application. It concentrates on whether all parts are working or not.

11.Sanity Testing: Sanity testing is a subset of regression testing and is done to make sure that the code changes introduced are working as expected.

12.Database Testing: that checks the schema, tables, etc of the database under test.

13.Adhoc Testing: Adhoc testing also known as monkey testing or random testing is a type of software testing that does not follow any documentation or test plan to perform testing.

14.Recovery Testing: Recovery testing is a type of software testing that verifies the software’s ability to recover from failures like hardware failures, software failures, crashes, etc.

Software Testing Life Cycle (STLC)

Planning : what should & shouldn't be tested (test manager/test lead)
Analysis : understand the appl. (tester)
Design   : Test matrix(test plan, test scenario, test case, test steps), +ve flow ,-ve flow (tester)
Execution: check test cases and verifies the expected & actual output are same (tester)
Closure  : documentation of everything is done (test manager/test lead)

=============================================================================================================================
Test plan:

> A Test Plan is a document that outlines the scope, objective, and approach for testing a software application
> Test Plan is a document that provides complete information about testing tasks related to a Software Project. It provides details like the scope of the testing, types of testing, objectives. It monitors the tests scheduled for execution after coding.

The test team manager or test lead can prepare the test plan document. 
What to test, when to test, who will test, and how to test will be defined in the test plan. 

Test Scenario:

>Test Scenario is a way to define all the ways to test an application. It is a single statement to cover all ways to test an application.

Examples of Test Scenarios:

Validate if the Admin can add a new country
Validate if the Admin can delete an existing country
Validate if an existing country can be updated

Test Condition is the specification that a tester must follow for testing an application.

Example Test Condition: In the above example, if we were to test the scenario 1, we can test the following conditions:

Enter the country’s name as “India”(valid)and check for the addition of the country
Enter a blank and check if the country gets added.
In each case, the specific data is described and the goal of the test is much more precise.

Test case:

>It is a step by step by procedure that is used to test an application

Test case template includes Test Suit ID, Test Data, Test procedure, Actual results, Expected results etc.

Example: We need to verify the login button in an application,
The steps include:
a) Launch the application.
b) Verify if the login button is displaying or not.






